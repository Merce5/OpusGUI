/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package spdvi;

import com.google.gson.*;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.*;
import java.awt.Image;
import java.awt.event.*;
import java.awt.image.BufferedImage;
import java.io.*;
import java.util.*;
import javax.imageio.ImageIO;
import javax.swing.*;
import spdvi.dialogs.*;
import spdvi.objects.*;

/**
 *
 * @author merce
 */
//En el MainForm es donde se va a hacer toda la relación directa con el json y a través de él se comunicarán los dialogs entre si
public class MainForm extends javax.swing.JFrame {
    
    //Declaramos el TypeToken para poder acceder a él en el JsonReader
    private static final java.lang.reflect.Type LIST_OF_ARTWORK_TYPE = new TypeToken<List<ArtWork>>() {}.getType();
    
    //Declaramos como publicos el ArrayList de artworks  y el JList para poder acceder a ellos desde los dialogs
    public ArrayList<ArtWork> artworks;
    public JList<ArtWork> lstArtWork;
    
    //Declaramos las booleanas que detectaran la actividad que estamos realizando en cada momento
    //Si estamos haciendo doble clck, actualizando o saliendo del programa
    public boolean dobleclick = false;
    public boolean update = false;
    private boolean exiting = false;
    
    //Declaramos el UpdateDialog para poder acceder a él desde el ShowDialog mediante el mainForm
    public UpdateDialog up;
    
    //Declaramos el DefaultListModel para poder acceder a él desde el ShowDialog
    public DefaultListModel<ArtWork> artworksLstModel = new DefaultListModel<ArtWork>();
    
    //La variable imagePath es la que usaremos siempre a la hora de acceder a las imagenes
    public String imagePath = "src/spdvi/icons/no_image.jpg";
    
    //Declaramos las strings de las rutas de los directorios que usaremos durante todo el programa
    private String userFolder = System.getProperty("user.home");
    public String imagesDirectory = userFolder + "\\AppData\\Local\\OpusList\\images\\";
    private String jsonDirectory = userFolder + "\\AppData\\Local\\OpusList\\data\\obres.json";

    public MainForm() {
        initComponents();
        //Inicializamos el JList, lo relacionamos con el scrollPane y le añadimos el selectionListener para detectar cuando se cambia el valor
        lstArtWork = new JList<>();
        scrArtWork.setViewportView(lstArtWork);
        lstArtWork.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            @Override
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lstArtworksValueChanged(evt);
            }
        });
        //Declaramos el mouseListener sobre el JList para saber cuando hacmos doble click encima de un objeto selecionado para abrir el showDialog
        lstArtWork.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent evt) {
                if (evt.getClickCount() == 2) {
                    doubleClick();
                }
            }
        });
        //Cuando se inicia el programa, el label donde se colocan las imagenes por defecto obtiene una foto llamada no_image.jpg
        try {
            BufferedImage image = ImageIO.read(new File("src\\spdvi\\icons\\no_image.jpg"));
            lblImage.setIcon(resizImageIcon(image));
        } catch (IOException ioe) {
            System.err.println("Error in ShowDialog");
            System.err.println(ioe);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitle = new javax.swing.JLabel();
        scrArtWork = new javax.swing.JScrollPane();
        lblImage = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        Save = new javax.swing.JMenu();
        mniCreate = new javax.swing.JMenuItem();
        mniUpdate = new javax.swing.JMenuItem();
        mniSave = new javax.swing.JMenuItem();
        mniDelete = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        mniExit = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Opos Manager");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setPreferredSize(new java.awt.Dimension(1100, 425));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        lblTitle.setFont(new java.awt.Font("Georgia", 1, 48)); // NOI18N
        lblTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitle.setText("Artwork manager");

        lblImage.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        Save.setText("File");

        mniCreate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/spdvi/icons/createIcon.jpg"))); // NOI18N
        mniCreate.setText("Create");
        mniCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniCreateActionPerformed(evt);
            }
        });
        Save.add(mniCreate);

        mniUpdate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/spdvi/icons/updateIcon.jpg"))); // NOI18N
        mniUpdate.setText("Update");
        mniUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniUpdateActionPerformed(evt);
            }
        });
        Save.add(mniUpdate);

        mniSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/spdvi/icons/guardar.jpg"))); // NOI18N
        mniSave.setText("Save");
        mniSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniSaveActionPerformed(evt);
            }
        });
        Save.add(mniSave);

        mniDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/spdvi/icons/deleteIcon.jpg"))); // NOI18N
        mniDelete.setText("Delete");
        mniDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniDeleteActionPerformed(evt);
            }
        });
        Save.add(mniDelete);
        Save.add(jSeparator1);

        mniExit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/spdvi/icons/exitIcon.jpg"))); // NOI18N
        mniExit.setText("Exit");
        mniExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniExitActionPerformed(evt);
            }
        });
        Save.add(mniExit);

        jMenuBar1.add(Save);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblTitle, javax.swing.GroupLayout.DEFAULT_SIZE, 1064, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(scrArtWork, javax.swing.GroupLayout.PREFERRED_SIZE, 744, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblImage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(13, 13, 13))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(lblTitle)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(scrArtWork, javax.swing.GroupLayout.DEFAULT_SIZE, 259, Short.MAX_VALUE)
                    .addComponent(lblImage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //Action listener del menu item Create
    private void mniCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniCreateActionPerformed
        ShowDialog sd = new ShowDialog(this, true);
        //Abrimos el ShowDialog
        sd.setVisible(true);
    }//GEN-LAST:event_mniCreateActionPerformed
    //Action listener del menu item Update
    private void mniUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniUpdateActionPerformed
        update = true;
        up = new UpdateDialog(this, true);
        //Antes de abrir el ShowDialog abrimos el UpdateDialog
        up.setVisible(true);
        update = false;
    }//GEN-LAST:event_mniUpdateActionPerformed

    //Action listener del menu item Save
    private void mniSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniSaveActionPerformed
        SaveDialog sd = new SaveDialog(this, true);
        if (!exiting) {
            //Para que cuando estemos saliendo no nos pida confirmación 2 veces, ni se guarde 2 veces
            sd.setVisible(true);
        }

        //Si queremos guardar desde el SaveDialog o desde el SaveExitDialog se ejecuta
        if (sd.action || exiting) {
            try (Writer writer = new FileWriter(jsonDirectory)) {
                for (ArtWork a : artworks) {
                    //Declaramos el sitio donde queremos guardar la imagen
                    String absolutePath = imagesDirectory + a.getRegistre() + ".jpg";
                    //Creamos la imagen que teniamos guardada en la obra
                    BufferedImage bufferedImage = ImageIO.read(new File(a.getImatge()));
                    //Como ya no tenemos que utilizar la ruta completa y cuando escriba en el json solo quiero guardar el nombre.jpg
                    //Hago un set de la imagen de la obra y así se escribirá con el gson.toJson
                    a.setImatge(a.getRegistre() + ".jpg");
                    //Creamos el archivo donde se tiene que guardar la foto
                    File outputImage = new File(absolutePath);
                    //Escribimos la imagen que hemos generado antes en formato jpg en el archivo que hemos creado
                    ImageIO.write(bufferedImage, "jpg", outputImage);
                }
                //Escribimos la lista de obras en el json
                Gson gson = new GsonBuilder().create();
                gson.toJson(artworks, writer);
                
                //Eliminamos las fotos que no usemos que se encuentren en la carpeta de AppData/Local/OpusList/images
                File folder = new File(imagesDirectory);
                findAllFilesInFolder(folder);
                
                //Esta parte solo es para cuando guardamos sin salir, es decir querramos hacer más cambios, con anterioridad
                //le hemos quitado la extensión a las imagenes para que se escriban en el json sin ella
                //pero si tenemos que seguir trabajando necesitamos esa extensión así que simplemente se la volvemos a cargar
                for (ArtWork a : artworks) {
                    a.setImatge(imagesDirectory + a.getImatge());
                }

            } catch (IOException ioe) {
                System.err.println("Error in mniSaveActionPerformed");
                System.err.println(ioe);
            }
        }
    }//GEN-LAST:event_mniSaveActionPerformed

    //Método que llama al DeleteDialog
    private void mniDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniDeleteActionPerformed
        DeleteDialog dd = new DeleteDialog(this, true);
        dd.setVisible(true);
    }//GEN-LAST:event_mniDeleteActionPerformed

    //Cuando cerramos la ventana en lugar de cerrarse se activa el siguiente método
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        exitOnClose();
    }//GEN-LAST:event_formWindowClosing

    //Cuando pulsamos el botón cerrar primero ejecuta el siguiente método
    private void mniExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniExitActionPerformed
        exitOnClose();
    }//GEN-LAST:event_mniExitActionPerformed

    //Cuando se abre el programa se carga a través de Gson el json dentro de un array
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        Gson gson = new Gson();
        try {
            JsonReader reader = new JsonReader(new FileReader(jsonDirectory));

            artworks = gson.fromJson(reader, LIST_OF_ARTWORK_TYPE);

            for (ArtWork a : artworks) {
                a.setImatge(imagesDirectory + a.getImatge());
                artworksLstModel.addElement(a);
            }

            lstArtWork.setModel(artworksLstModel);
        } catch (FileNotFoundException fnfe) {
            System.err.println("Error loading artworks");
        }
    }//GEN-LAST:event_formWindowOpened

    /**
     * @param args the command line arguments
     */
    //Método que se ejecuta cuando el usuario quiere salir del programa
    private void exitOnClose() {
        Gson gson = new Gson();
        try {
            //Vuelve a leer el documento y lo carga en un array para compararla al array de los artworks
            JsonReader reader = new JsonReader(new FileReader(jsonDirectory));

            ArrayList<ArtWork> comparar = gson.fromJson(reader, LIST_OF_ARTWORK_TYPE);

            for (ArtWork a : comparar) {
                a.setImatge(imagesDirectory + a.getImatge());
            }

            //Si los dos arrays son de tamaño diferente si o si ha habido algún cambio así que se ejecuta el método saveOnExit
            if (comparar.size() != artworks.size()) {
                saveOnExit();
            } else {
                for (int i = 0; i < comparar.size(); i++) {
                    //Si los objetos no son iguales en la misma posición quiere decir que ha habido cambios y no se han guardado
                    if (!comparar.get(i).toString().equals(artworks.get(i).toString())) {
                        saveOnExit();
                        //Una vez se ejecuta el save on exit no necesitamos que se haga más veces
                        return;
                    }
                }
                //Si no entra en el return anterior quiere decir que o está todo guardado o ya hemos salido del programa 
                //así que se hace el this.dispose para finalizarlo todo
                this.dispose();
            }
        } catch (FileNotFoundException fnfe) {
            System.err.println("Error loading artworks");
        }
    }

    //Abre el dialog SaveExitDialog para que el usuario elija que quiere hacer
    private void saveOnExit() {
        SaveExitDialog sed = new SaveExitDialog(this, true);
        sed.setVisible(true);

        //Dependiendo de la opción del usuario solo se cancelará el exit y el save
        switch (sed.action) {
            case 0 -> {
                return;
            }
            //Se guardará y se cerrará
            case 1 -> {
                exiting = true;
                mniSave.doClick();
                this.dispose();
                return;
            }
            //Se cerrará sin guardar
            case 2 -> {
                this.dispose();
            }
        }
    }

    //Metodo que recoge el evento de valueChanged el lstArtworks (Se cambia el icono del label)
    private void lstArtworksValueChanged(javax.swing.event.ListSelectionEvent evt) {
        try {
            ArtWork a = (ArtWork) lstArtWork.getSelectedValue();
            BufferedImage image = ImageIO.read(new File(a.getImatge()));
            lblImage.setIcon(resizImageIcon(image));
        } catch (IOException ioe) {
            System.err.println("Error in lstArtworksValueChanged");
            System.err.println(ioe);
        } catch (NullPointerException npe) {

        }
    }

    //Se hace el resize del icono
    private ImageIcon resizImageIcon(BufferedImage originalImage) {
        int desiredHeight = 0;
        int desiredWidth = 0;
        float aspectRatio = (float) originalImage.getWidth() / originalImage.getHeight();
        if (originalImage.getWidth() < originalImage.getHeight()) {
            desiredWidth = Math.round(lblImage.getHeight() * aspectRatio);
            desiredHeight = lblImage.getHeight();
        } else {
            desiredHeight = Math.round(lblImage.getWidth() / aspectRatio);
            desiredWidth = lblImage.getWidth();
        }

        Image resultingImage = originalImage.getScaledInstance(desiredWidth, desiredHeight, Image.SCALE_SMOOTH);
        BufferedImage outputImage = new BufferedImage(desiredWidth, desiredHeight, BufferedImage.TYPE_INT_RGB);
        outputImage.getGraphics().drawImage(resultingImage, 0, 0, null);

        ImageIcon icon = new ImageIcon(outputImage);
        return icon;
    }

    //Acción que se activa si hacemos doble click
    private void doubleClick() {
        //Activa los boolean que necesitamos para trabajar en el ShowDialog
        dobleclick = true;
        update = true;
        //Abre el ShowDialog
        ShowDialog sd = new ShowDialog(this, true);
        sd.setVisible(true);
        //Cuando finaliza se vuelven a setear en false para que no haya conflictos
        dobleclick = false;
        update = false;
    }

    public void findAllFilesInFolder(File folder) {
        //Recorre la carpeta donde se guardan las fotos y guarda el nombre de las fotos que usan los usuarios 
        //en un array string para que sea más fácil la comparación
        ArrayList<String> goodFiles = new ArrayList<>();
        for (File file : folder.listFiles()) {
            for (ArtWork a : artworks) {
                if (file.getName().equals(a.getImatge())) {
                    goodFiles.add(file.getName());
                }
            }
        }

        //Recorre la carpeta otra vez y borra todos los archivos que no se encuentren dentro del array de las imaganes que usamos
        for (File file : folder.listFiles()) {
            if (!goodFiles.contains(file.getName())) {
                file.delete();
            }
        }
    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu Save;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JLabel lblImage;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JMenuItem mniCreate;
    private javax.swing.JMenuItem mniDelete;
    private javax.swing.JMenuItem mniExit;
    private javax.swing.JMenuItem mniSave;
    private javax.swing.JMenuItem mniUpdate;
    private javax.swing.JScrollPane scrArtWork;
    // End of variables declaration//GEN-END:variables
}
